name: Deploy to EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    container:
      image: node:slim

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SSH client and rsync
        run: |
          apt-get update && apt-get install -y --no-install-recommends openssh-client rsync ca-certificates && rm -rf /var/lib/apt/lists/*

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # add known hosts either from secret or by scanning the host
          if [ -n "$KNOWN_HOSTS" ]; then
            echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts
          else
            ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
          fi

      - name: Upload project to EC2 (rsync)
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        run: |
          # create remote folder
          ssh ${EC2_USER}@${EC2_HOST} "mkdir -p ${REMOTE_PATH}"
          # rsync repo, excluding heavy/unnecessary files
          rsync -az --delete --rsync-path="mkdir -p ${REMOTE_PATH} && rsync" --exclude='.git' --exclude='node_modules' --exclude='bin' --exclude='obj' ./ ${EC2_USER}@${EC2_HOST}:${REMOTE_PATH}

      - name: Run docker compose on EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        run: |
          ssh ${EC2_USER}@${EC2_HOST} "cd ${REMOTE_PATH} && docker compose up --build -V -d"
